/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Database;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.*;
/**
 *
 * @author nunya
 */
public class MainMenu extends javax.swing.JFrame {
    Connection objDBConnection = null;
    MySQLConnectExample objMySQLDBConnect = null;
    UpdateDataDialog objUpdateData = null;
    String[] columnNames=null;
    String tableName = null;
    String selectSQL = null;
    String deleteSQL = null;
    
    DefaultTableModel model = null;
    //ErrorPopUp objError = null;
    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        objMySQLDBConnect = new MySQLConnectExample();  
        objDBConnection = objMySQLDBConnect.getDBConnection();
        //objError = new ErrorPopUp();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DisplayDialog = new javax.swing.JDialog();
        lblSelectDisplayTable = new javax.swing.JLabel();
        DisplayTblSelectionMenu = new javax.swing.JComboBox<>();
        DisplayMHBELogo = new javax.swing.JLabel();
        FindMinDialog = new javax.swing.JDialog();
        lblMinMaxTblList = new javax.swing.JLabel();
        lblMinMaxColList = new javax.swing.JLabel();
        MinTblList = new javax.swing.JComboBox<>();
        MinColList = new javax.swing.JComboBox<>();
        FindMinMaxMHBELogo = new javax.swing.JLabel();
        CompareDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        PrintTableDIalog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        CustomSQLdialog = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        FindMaxDialog = new javax.swing.JDialog();
        lblMaxTblList = new javax.swing.JLabel();
        lblMaxColList = new javax.swing.JLabel();
        MaxTblList = new javax.swing.JComboBox<>();
        MaxColList = new javax.swing.JComboBox<>();
        FindMaxMHBELogo = new javax.swing.JLabel();
        MainMenuTab = new javax.swing.JTabbedPane();
        MMOuterContainer = new javax.swing.JPanel();
        MMWelcome = new javax.swing.JLabel();
        MMinnerContainer = new javax.swing.JPanel();
        MMintroText = new javax.swing.JLabel();
        ModifyTabDescription = new javax.swing.JLabel();
        InsertTabDescription = new javax.swing.JLabel();
        QueryTabDescription = new javax.swing.JLabel();
        ModifyTabContainer = new javax.swing.JPanel();
        ModSidePanel = new javax.swing.JPanel();
        lblModifyTableList = new javax.swing.JLabel();
        lblModifyWarning = new javax.swing.JLabel();
        ModifyMHBELogo = new javax.swing.JLabel();
        deleteTblData = new javax.swing.JButton();
        updateTblData = new javax.swing.JButton();
        ModifyTableDropdown = new javax.swing.JComboBox<>();
        ModifyTableScrollPane = new javax.swing.JScrollPane();
        ModifyResultTable = new javax.swing.JTable();
        InsertTabContainer = new javax.swing.JPanel();
        InsertTabOuterContainer = new javax.swing.JTabbedPane();
        InsertStartTab = new javax.swing.JPanel();
        lblInsertIntro = new javax.swing.JLabel();
        lblInsertInstructions1 = new javax.swing.JLabel();
        lblInsertInstructions2 = new javax.swing.JLabel();
        InsertMHBELogo1 = new javax.swing.JLabel();
        InsertStp1Tab = new javax.swing.JPanel();
        InsertStp1Header = new javax.swing.JLabel();
        lblInsertIssuerID = new javax.swing.JLabel();
        InsertIssuerName = new javax.swing.JTextField();
        lblInsertIssuerName = new javax.swing.JLabel();
        InsertIssuerID = new javax.swing.JTextField();
        lblInsertServiceArea = new javax.swing.JLabel();
        InsertServiceArea = new javax.swing.JTextField();
        btnInsertINSERT1 = new javax.swing.JButton();
        btnInsertNEXT1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        InsertProviderTable = new javax.swing.JTable();
        PopulateProviderTable = new javax.swing.JToggleButton();
        InsertStp2Tab = new javax.swing.JPanel();
        InsertStp2Header = new javax.swing.JLabel();
        lblInsertPlanID = new javax.swing.JLabel();
        lblInsertPlanURL = new javax.swing.JLabel();
        lblInsertPlanType = new javax.swing.JLabel();
        lblInsertQHPStatus = new javax.swing.JLabel();
        lblInsertStatus = new javax.swing.JLabel();
        lblPlanName = new javax.swing.JLabel();
        lblMetalLevel = new javax.swing.JLabel();
        InsertChildOnlyCheck = new javax.swing.JCheckBox();
        lblChildOnlyPlanID = new javax.swing.JLabel();
        lblPlanServiceArea = new javax.swing.JLabel();
        lblEHBPercentPremium = new javax.swing.JLabel();
        lblPlanIssuerID = new javax.swing.JLabel();
        btnInsertINSERT2 = new javax.swing.JButton();
        btnInsertNEXT2 = new javax.swing.JButton();
        PlanID = new javax.swing.JTextField();
        InsertPlanURL = new javax.swing.JTextField();
        InsertPlanType = new javax.swing.JTextField();
        InsertQHPStatus = new javax.swing.JTextField();
        InsertStatus = new javax.swing.JTextField();
        InsertPlanName = new javax.swing.JTextField();
        InsertMetalLvl = new javax.swing.JTextField();
        InsertChildPlan = new javax.swing.JTextField();
        InsertPlanServArea = new javax.swing.JTextField();
        InsertEHBPercPremium = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        InsertResultTable2 = new javax.swing.JTable();
        IssuerIDdropdown = new javax.swing.JComboBox<>();
        PopulatePlanTable = new javax.swing.JToggleButton();
        InsertStep3Tab = new javax.swing.JPanel();
        lblInsertPremium = new javax.swing.JLabel();
        lblInsertPlanID3 = new javax.swing.JLabel();
        lblIndivRate = new javax.swing.JLabel();
        lblAgeRange = new javax.swing.JLabel();
        InsertBeneHeader = new javax.swing.JLabel();
        lblBenePlanID = new javax.swing.JLabel();
        lblBeneService = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        lblBeneDescrip = new javax.swing.JLabel();
        lblReasonEHB = new javax.swing.JLabel();
        lblQuantServ = new javax.swing.JLabel();
        InsertBeneCoveredCheck = new javax.swing.JCheckBox();
        InsertBeneEHBCheck = new javax.swing.JCheckBox();
        InsertCostShareHeader = new javax.swing.JLabel();
        lblInsertCSPlanID = new javax.swing.JLabel();
        lblCSRvar = new javax.swing.JLabel();
        lblAdvPayment = new javax.swing.JLabel();
        lblIssuerActuarial = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        InsertBeneServ = new javax.swing.JTextField();
        InsertAgeRange = new javax.swing.JTextField();
        InsertIndivRate = new javax.swing.JTextField();
        InsertBeneReasonEHB = new javax.swing.JTextField();
        BeneQuantServ = new javax.swing.JTextField();
        InsertBeneDescrip = new javax.swing.JTextField();
        InsertCSRvar = new javax.swing.JTextField();
        InsertAdvancedPayment = new javax.swing.JTextField();
        InsertActuarialValue = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        InsertResultTable3 = new javax.swing.JTable();
        InsertPlanID3 = new javax.swing.JComboBox<>();
        InsertBenePlanID = new javax.swing.JComboBox<>();
        InsertCSPlanID = new javax.swing.JComboBox<>();
        PopulatePremiumTable = new javax.swing.JToggleButton();
        PopulateBenefitsTable = new javax.swing.JToggleButton();
        PopulateCSTable = new javax.swing.JToggleButton();
        InsertStep4Tab = new javax.swing.JPanel();
        InsertRefReqHeader = new javax.swing.JLabel();
        lblInsertRefPlanID = new javax.swing.JLabel();
        lblSpecReq = new javax.swing.JLabel();
        lblRefReq = new javax.swing.JLabel();
        InsertBeneCostHeader = new javax.swing.JLabel();
        InsertPlanlvlProgramsHeader = new javax.swing.JLabel();
        lblInsertBeneServ = new javax.swing.JLabel();
        lblInsertCopay = new javax.swing.JLabel();
        lblBeneCoin = new javax.swing.JLabel();
        lblBeneCostPlanID = new javax.swing.JLabel();
        lblPlanLvlPlanID = new javax.swing.JLabel();
        lblTabaccoWell = new javax.swing.JLabel();
        lblDiseaseMgmt = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        InsertRefPlanID = new javax.swing.JComboBox<>();
        InsertRefReq = new javax.swing.JTextField();
        InsertPlanLvlPlanID = new javax.swing.JComboBox<>();
        InsertTabaccoWellness = new javax.swing.JTextField();
        InsertBeneCostService = new javax.swing.JComboBox<>();
        InsertBeneCopay = new javax.swing.JTextField();
        InsertBeneCostPlanID = new javax.swing.JComboBox<>();
        InsertBeneCoinsurance = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        InsertResultTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        InsertDiseaseMgmt = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        InsertSpecialistsRequired = new javax.swing.JTextArea();
        PopulateReferralTable = new javax.swing.JToggleButton();
        PopulateBenefitCostTable = new javax.swing.JToggleButton();
        PopulatePlanLvlProgramsTable = new javax.swing.JToggleButton();
        InsertStep5Tab = new javax.swing.JPanel();
        InsertMOOPHeader = new javax.swing.JLabel();
        lblMOOPplanID = new javax.swing.JLabel();
        lblInNetMOOP = new javax.swing.JLabel();
        lblOutNetMOOP = new javax.swing.JLabel();
        InsertGeoHeader = new javax.swing.JLabel();
        lblOOCcoverage = new javax.swing.JLabel();
        lblOOScoverage = new javax.swing.JLabel();
        lblGeoPlanID = new javax.swing.JLabel();
        NationalNetCoverageCheck = new javax.swing.JCheckBox();
        btnInsertINSERT5 = new javax.swing.JButton();
        btnInsertNEXT5 = new javax.swing.JButton();
        InsertInNetMOOP = new javax.swing.JTextField();
        InsertOutNetMOOP = new javax.swing.JTextField();
        InsertOOScoverage = new javax.swing.JTextField();
        InsertOOCcoverage = new javax.swing.JTextField();
        InsertMOOPplanID = new javax.swing.JComboBox<>();
        InsertGeoPlanID = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        InsertResultTable5 = new javax.swing.JTable();
        InsertOOPHeader = new javax.swing.JLabel();
        lblOOPPlanID = new javax.swing.JLabel();
        InsertOOPplanID = new javax.swing.JComboBox<>();
        lblInsertOOPCoin = new javax.swing.JLabel();
        InsertOOPcoinsurance = new javax.swing.JTextField();
        lblOOPCopay = new javax.swing.JLabel();
        InsertOOPcopay = new javax.swing.JTextField();
        lblInsertHSAHRA = new javax.swing.JLabel();
        InsertOOPHSAHRA = new javax.swing.JTextField();
        PopulateMOOPTable = new javax.swing.JToggleButton();
        PopulateOOPTable = new javax.swing.JToggleButton();
        PopulateGeoTable = new javax.swing.JToggleButton();
        InsertStep6Tab = new javax.swing.JPanel();
        InsertINDeductHeader = new javax.swing.JLabel();
        lblINnetPlanID = new javax.swing.JLabel();
        lblINnetPedDentDeduct = new javax.swing.JLabel();
        lblINnetMedDeduct = new javax.swing.JLabel();
        lblINnetDrugDeduct = new javax.swing.JLabel();
        InsertINdeductcheck = new javax.swing.JCheckBox();
        lblINnetComboDeduct = new javax.swing.JLabel();
        btnInsertINSERT6 = new javax.swing.JButton();
        InsertINnetPedDentDeduct = new javax.swing.JTextField();
        InsertINnetMedDeduct = new javax.swing.JTextField();
        InsertINnetDrugDeduct = new javax.swing.JTextField();
        InsertINnetComboDeduct = new javax.swing.JTextField();
        btnInsertSAVE = new javax.swing.JButton();
        InsertInNetworPlanID = new javax.swing.JComboBox<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        InsertResultTable6 = new javax.swing.JTable();
        InsertOONDeductHeader = new javax.swing.JLabel();
        lblOONPlanID = new javax.swing.JLabel();
        InsertOONDeduct = new javax.swing.JComboBox<>();
        lblinNetPedDent = new javax.swing.JLabel();
        InsertOONPedDent = new javax.swing.JTextField();
        lblInNetMed = new javax.swing.JLabel();
        InsertOONnetMed = new javax.swing.JTextField();
        lblINnetDrug = new javax.swing.JLabel();
        InsertOONDrugDeduct = new javax.swing.JTextField();
        CombinedDeductCheck = new javax.swing.JCheckBox();
        lblINnetCombined = new javax.swing.JLabel();
        InsertOONComboDeduct = new javax.swing.JTextField();
        PopulateINnetDeductTable = new javax.swing.JToggleButton();
        PopulateOONDeductTable = new javax.swing.JToggleButton();
        QueryTabContainer = new javax.swing.JPanel();
        QueryTableContainer = new javax.swing.JScrollPane();
        QueryResultTable = new javax.swing.JTable();
        lblCustomSQLQueryBtn = new javax.swing.JLabel();
        lblQueryTabIntro = new javax.swing.JLabel();
        QueryDropdownList = new javax.swing.JComboBox<>();
        lblQueryDropdown = new javax.swing.JLabel();
        FileMenu = new javax.swing.JMenuBar();
        FileDropdown = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();
        HelpDropdown = new javax.swing.JMenu();
        HelpMenuOption = new javax.swing.JMenuItem();
        AboutMenuOption = new javax.swing.JMenuItem();

        DisplayDialog.setBackground(new java.awt.Color(51, 153, 255));
        DisplayDialog.setMinimumSize(new java.awt.Dimension(320, 200));

        lblSelectDisplayTable.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblSelectDisplayTable.setText("Please select the table(s) you wish to display:");

        DisplayTblSelectionMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Benefits", "Cost Sharing", "Dates", "Exclusions", "Geographic Coverage", "In-Network Deductible", "Maximum Out-of-Pocket", "Out-of-Network Deductible", "Out-of-Pocket Costs", "Plan", "Plan-Level Programs", "Premium", "Provider", "Referral Required", "Service Cost" }));
        DisplayTblSelectionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayTblSelectionMenuActionPerformed(evt);
            }
        });

        DisplayMHBELogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N

        javax.swing.GroupLayout DisplayDialogLayout = new javax.swing.GroupLayout(DisplayDialog.getContentPane());
        DisplayDialog.getContentPane().setLayout(DisplayDialogLayout);
        DisplayDialogLayout.setHorizontalGroup(
            DisplayDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DisplayDialogLayout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addGroup(DisplayDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSelectDisplayTable, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DisplayTblSelectionMenu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DisplayMHBELogo))
        );
        DisplayDialogLayout.setVerticalGroup(
            DisplayDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisplayDialogLayout.createSequentialGroup()
                .addGroup(DisplayDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DisplayMHBELogo)
                    .addGroup(DisplayDialogLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lblSelectDisplayTable, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DisplayTblSelectionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        FindMinDialog.setBackground(new java.awt.Color(255, 255, 255));
        FindMinDialog.setMinimumSize(new java.awt.Dimension(500, 400));

        lblMinMaxTblList.setBackground(new java.awt.Color(255, 255, 255));
        lblMinMaxTblList.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMinMaxTblList.setText("Please choose a table to query:");

        lblMinMaxColList.setBackground(new java.awt.Color(255, 255, 255));
        lblMinMaxColList.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMinMaxColList.setText("Please select a column:");

        MinTblList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Premium", "Cost Sharing", "In-network deductible", "Out-of-network deductible", "Out-of-pocket costs", "Service Cost" }));
        MinTblList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinTblListActionPerformed(evt);
            }
        });

        MinColList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        FindMinMaxMHBELogo.setBackground(new java.awt.Color(255, 255, 255));
        FindMinMaxMHBELogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N

        javax.swing.GroupLayout FindMinDialogLayout = new javax.swing.GroupLayout(FindMinDialog.getContentPane());
        FindMinDialog.getContentPane().setLayout(FindMinDialogLayout);
        FindMinDialogLayout.setHorizontalGroup(
            FindMinDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindMinDialogLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(FindMinDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FindMinDialogLayout.createSequentialGroup()
                        .addGroup(FindMinDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMinMaxTblList)
                            .addComponent(MinTblList, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FindMinMaxMHBELogo))
                    .addGroup(FindMinDialogLayout.createSequentialGroup()
                        .addGroup(FindMinDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMinMaxColList)
                            .addComponent(MinColList, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(212, Short.MAX_VALUE))))
        );
        FindMinDialogLayout.setVerticalGroup(
            FindMinDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindMinDialogLayout.createSequentialGroup()
                .addGroup(FindMinDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FindMinMaxMHBELogo)
                    .addGroup(FindMinDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMinMaxTblList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MinTblList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addComponent(lblMinMaxColList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MinColList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        CompareDialog.setMinimumSize(new java.awt.Dimension(600, 400));

        jLabel1.setText("Select the ");

        javax.swing.GroupLayout CompareDialogLayout = new javax.swing.GroupLayout(CompareDialog.getContentPane());
        CompareDialog.getContentPane().setLayout(CompareDialogLayout);
        CompareDialogLayout.setHorizontalGroup(
            CompareDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CompareDialogLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addContainerGap(470, Short.MAX_VALUE))
        );
        CompareDialogLayout.setVerticalGroup(
            CompareDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CompareDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(355, Short.MAX_VALUE))
        );

        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout PrintTableDIalogLayout = new javax.swing.GroupLayout(PrintTableDIalog.getContentPane());
        PrintTableDIalog.getContentPane().setLayout(PrintTableDIalogLayout);
        PrintTableDIalogLayout.setHorizontalGroup(
            PrintTableDIalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrintTableDIalogLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel2)
                .addContainerGap(307, Short.MAX_VALUE))
        );
        PrintTableDIalogLayout.setVerticalGroup(
            PrintTableDIalogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrintTableDIalogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(271, Short.MAX_VALUE))
        );

        jLabel3.setText("Please Enter your custom SQL query below:");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CustomSQLdialogLayout = new javax.swing.GroupLayout(CustomSQLdialog.getContentPane());
        CustomSQLdialog.getContentPane().setLayout(CustomSQLdialogLayout);
        CustomSQLdialogLayout.setHorizontalGroup(
            CustomSQLdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomSQLdialogLayout.createSequentialGroup()
                .addGroup(CustomSQLdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CustomSQLdialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(CustomSQLdialogLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(CustomSQLdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CustomSQLdialogLayout.setVerticalGroup(
            CustomSQLdialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomSQLdialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        FindMaxDialog.setBackground(new java.awt.Color(255, 255, 255));
        FindMaxDialog.setMinimumSize(new java.awt.Dimension(500, 400));

        lblMaxTblList.setBackground(new java.awt.Color(255, 255, 255));
        lblMaxTblList.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMaxTblList.setText("Please choose a table to query:");

        lblMaxColList.setBackground(new java.awt.Color(255, 255, 255));
        lblMaxColList.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMaxColList.setText("Please select a column:");

        MaxTblList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Premium", "Cost Sharing", "In-network deductible", "Out-of-network deductible", "Out-of-pocket costs", "Service Cost" }));
        MaxTblList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxTblListActionPerformed(evt);
            }
        });

        MaxColList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        FindMaxMHBELogo.setBackground(new java.awt.Color(255, 255, 255));
        FindMaxMHBELogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N

        javax.swing.GroupLayout FindMaxDialogLayout = new javax.swing.GroupLayout(FindMaxDialog.getContentPane());
        FindMaxDialog.getContentPane().setLayout(FindMaxDialogLayout);
        FindMaxDialogLayout.setHorizontalGroup(
            FindMaxDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindMaxDialogLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(FindMaxDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FindMaxDialogLayout.createSequentialGroup()
                        .addGroup(FindMaxDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaxTblList)
                            .addComponent(MaxTblList, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FindMaxMHBELogo))
                    .addGroup(FindMaxDialogLayout.createSequentialGroup()
                        .addGroup(FindMaxDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMaxColList)
                            .addComponent(MaxColList, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(212, Short.MAX_VALUE))))
        );
        FindMaxDialogLayout.setVerticalGroup(
            FindMaxDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindMaxDialogLayout.createSequentialGroup()
                .addGroup(FindMaxDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FindMaxMHBELogo)
                    .addGroup(FindMaxDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMaxTblList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MaxTblList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addComponent(lblMaxColList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MaxColList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        setForeground(java.awt.Color.cyan);

        MainMenuTab.setBackground(new java.awt.Color(255, 255, 255));
        MainMenuTab.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        MMOuterContainer.setBackground(new java.awt.Color(255, 255, 255));

        MMWelcome.setBackground(new java.awt.Color(255, 255, 255));
        MMWelcome.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        MMWelcome.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        MMWelcome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/MHBElogo.jpg"))); // NOI18N
        MMWelcome.setText("<html><BLOCKQUOTE>Welcome to the Rate and Plan Template Database </br>for the Maryland Health Benefit Exchange</BLOCKQUOTE></html>");

        MMinnerContainer.setBackground(new java.awt.Color(255, 255, 255));

        MMintroText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        MMintroText.setText("<html>This application allows the user to send queries to the Rate and Plan Database to retrieve information </br> about the Insurance Plans offered by Issuers participating in the Maryland HBX. Please select and option below to continue.</html>");

        ModifyTabDescription.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ModifyTabDescription.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N
        ModifyTabDescription.setText("<html><b>Modify Templates:</b></br> </br> This tab will allow users to modify any existing tables within the template database. Navigate to this tab if you need to update specific template information OR if you need to delete any template information from the database.</br> </br></html>");

        InsertTabDescription.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        InsertTabDescription.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N
        InsertTabDescription.setText("<html><b>Insert Template:</b></br> </br> This tab allows users to insert a new template into the database, table by table.</br> </html>");

        QueryTabDescription.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        QueryTabDescription.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N
        QueryTabDescription.setText("<html><b>Query Database:</b></br> </br> This tab allows users to ask specific questions of the database. Some common pre-generated queries are available and there is an option for advanced users to supply a SQL query to the database to answer more complex questions.</br> </html>");

        javax.swing.GroupLayout MMinnerContainerLayout = new javax.swing.GroupLayout(MMinnerContainer);
        MMinnerContainer.setLayout(MMinnerContainerLayout);
        MMinnerContainerLayout.setHorizontalGroup(
            MMinnerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MMinnerContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MMinnerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ModifyTabDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InsertTabDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QueryTabDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MMintroText, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        MMinnerContainerLayout.setVerticalGroup(
            MMinnerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MMinnerContainerLayout.createSequentialGroup()
                .addComponent(MMintroText, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(ModifyTabDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(InsertTabDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(QueryTabDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 165, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout MMOuterContainerLayout = new javax.swing.GroupLayout(MMOuterContainer);
        MMOuterContainer.setLayout(MMOuterContainerLayout);
        MMOuterContainerLayout.setHorizontalGroup(
            MMOuterContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MMinnerContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(MMOuterContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MMWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MMOuterContainerLayout.setVerticalGroup(
            MMOuterContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MMOuterContainerLayout.createSequentialGroup()
                .addComponent(MMWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MMinnerContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainMenuTab.addTab("Main Menu", MMOuterContainer);

        ModifyTabContainer.setBackground(new java.awt.Color(255, 255, 255));

        ModSidePanel.setBackground(new java.awt.Color(255, 255, 255));

        lblModifyTableList.setLabelFor(ModifyTabContainer);
        lblModifyTableList.setText("Which table would you like to modify?");

        lblModifyWarning.setForeground(new java.awt.Color(255, 0, 0));
        lblModifyWarning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/warning-icon.png"))); // NOI18N
        lblModifyWarning.setText("<html><b>WARNING:</b> The information housed in this database comes directly from the Issuer Templates uploaded to SERFF. The only reason a user should modify a template is to correct information that was incorrectly added to the database via either an automated process or manual data entry. </br>This database is meant to be a source of truth for MHBE and should only ever contain information pulled directly from the templates on SERFF. Thank you.</html>");
        lblModifyWarning.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.red, java.awt.Color.darkGray));

        ModifyMHBELogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/MHBElogo.jpg"))); // NOI18N

        deleteTblData.setText("Delete");
        deleteTblData.setEnabled(false);
        deleteTblData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTblDataActionPerformed(evt);
            }
        });

        updateTblData.setText("Update");
        updateTblData.setEnabled(false);
        updateTblData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTblDataActionPerformed(evt);
            }
        });

        ModifyTableDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Provider Table", "Plan Table", "Plan Level Programs Table", "Benefit Table", "Cost Sharing Table", "Service Cost Table", "Dates Table", "Exclusions Table", "Geographic Coverage Table", "In Network Deductible Table", "Out-of-Network Deductible Table", "Out-of-pocket Table", "Referral Required Table", "Maximum Out-of-pocket Table" }));
        ModifyTableDropdown.setSelectedItem(null);
        ModifyTableDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyTableDropdownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ModSidePanelLayout = new javax.swing.GroupLayout(ModSidePanel);
        ModSidePanel.setLayout(ModSidePanelLayout);
        ModSidePanelLayout.setHorizontalGroup(
            ModSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModSidePanelLayout.createSequentialGroup()
                .addGroup(ModSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ModSidePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ModifyMHBELogo))
                    .addGroup(ModSidePanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(ModSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteTblData, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateTblData, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 23, Short.MAX_VALUE))
            .addGroup(ModSidePanelLayout.createSequentialGroup()
                .addGroup(ModSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ModSidePanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(lblModifyWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ModSidePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ModSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ModifyTableDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblModifyTableList, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))))
                .addContainerGap())
        );
        ModSidePanelLayout.setVerticalGroup(
            ModSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModSidePanelLayout.createSequentialGroup()
                .addComponent(ModifyMHBELogo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblModifyTableList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ModifyTableDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblModifyWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateTblData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteTblData, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ModifyResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ModifyResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ModifyResultTableMouseReleased(evt);
            }
        });
        ModifyResultTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ModifyResultTableKeyReleased(evt);
            }
        });
        ModifyTableScrollPane.setViewportView(ModifyResultTable);

        javax.swing.GroupLayout ModifyTabContainerLayout = new javax.swing.GroupLayout(ModifyTabContainer);
        ModifyTabContainer.setLayout(ModifyTabContainerLayout);
        ModifyTabContainerLayout.setHorizontalGroup(
            ModifyTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModifyTabContainerLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(ModSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(ModifyTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 947, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        ModifyTabContainerLayout.setVerticalGroup(
            ModifyTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ModifyTabContainerLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(ModSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(ModifyTabContainerLayout.createSequentialGroup()
                .addComponent(ModifyTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 40, Short.MAX_VALUE))
        );

        MainMenuTab.addTab("Modify Templates", ModifyTabContainer);

        InsertTabOuterContainer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                InsertTabOuterContainerFocusGained(evt);
            }
        });

        InsertStartTab.setBackground(new java.awt.Color(255, 255, 255));

        lblInsertIntro.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        lblInsertIntro.setText("<html>Template data must be entered in a specific order to maintain database integrity.</br></br></html>");

        lblInsertInstructions1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblInsertInstructions1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N
        lblInsertInstructions1.setText("Please add data to the tables in the order listed in the tabs.");

        lblInsertInstructions2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblInsertInstructions2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/mhbelogo_thumb.png"))); // NOI18N
        lblInsertInstructions2.setText("Note: Hit \"Insert\" before hitting \"Next\"");

        InsertMHBELogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/MHBElogo.jpg"))); // NOI18N

        javax.swing.GroupLayout InsertStartTabLayout = new javax.swing.GroupLayout(InsertStartTab);
        InsertStartTab.setLayout(InsertStartTabLayout);
        InsertStartTabLayout.setHorizontalGroup(
            InsertStartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStartTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InsertMHBELogo1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStartTabLayout.createSequentialGroup()
                .addGap(0, 288, Short.MAX_VALUE)
                .addGroup(InsertStartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInsertInstructions2)
                    .addComponent(lblInsertInstructions1)
                    .addComponent(lblInsertIntro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        InsertStartTabLayout.setVerticalGroup(
            InsertStartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStartTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InsertMHBELogo1)
                .addGap(82, 82, 82)
                .addComponent(lblInsertIntro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblInsertInstructions1)
                .addGap(18, 18, 18)
                .addComponent(lblInsertInstructions2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        InsertTabOuterContainer.addTab("Getting Started", InsertStartTab);

        InsertStp1Header.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        InsertStp1Header.setText("Insert into Provider Table");

        lblInsertIssuerID.setText("Issuer ID");

        InsertIssuerName.setText("                                                   ");
        InsertIssuerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertIssuerNameActionPerformed(evt);
            }
        });

        lblInsertIssuerName.setText("Name");

        InsertIssuerID.setText("                                                   ");
        InsertIssuerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertIssuerIDActionPerformed(evt);
            }
        });

        lblInsertServiceArea.setText("Service Area");

        InsertServiceArea.setText("                                                   ");
        InsertServiceArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertServiceAreaActionPerformed(evt);
            }
        });

        btnInsertINSERT1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertINSERT1.setText("Insert");

        btnInsertNEXT1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertNEXT1.setText("Next");
        btnInsertNEXT1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertNEXT1ActionPerformed(evt);
            }
        });

        InsertProviderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(InsertProviderTable);

        PopulateProviderTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PopulateProviderTable.setText("Populate Table");
        PopulateProviderTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateProviderTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertStp1TabLayout = new javax.swing.GroupLayout(InsertStp1Tab);
        InsertStp1Tab.setLayout(InsertStp1TabLayout);
        InsertStp1TabLayout.setHorizontalGroup(
            InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStp1TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(InsertStp1TabLayout.createSequentialGroup()
                        .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(InsertStp1TabLayout.createSequentialGroup()
                                .addComponent(lblInsertServiceArea)
                                .addGap(18, 18, 18)
                                .addComponent(InsertServiceArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(InsertStp1TabLayout.createSequentialGroup()
                                .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblInsertIssuerID)
                                    .addComponent(lblInsertIssuerName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InsertIssuerID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(InsertIssuerName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(51, 51, 51))
                    .addGroup(InsertStp1TabLayout.createSequentialGroup()
                        .addComponent(InsertStp1Header)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PopulateProviderTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStp1TabLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(InsertStp1TabLayout.createSequentialGroup()
                        .addGap(10, 685, Short.MAX_VALUE)
                        .addComponent(btnInsertINSERT1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnInsertNEXT1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        InsertStp1TabLayout.setVerticalGroup(
            InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStp1TabLayout.createSequentialGroup()
                .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStp1TabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertStp1Header)
                            .addComponent(PopulateProviderTable))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertIssuerID)
                            .addComponent(InsertIssuerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertIssuerName)
                            .addComponent(InsertIssuerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertServiceArea)
                            .addComponent(InsertServiceArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStp1TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertINSERT1)
                    .addComponent(btnInsertNEXT1))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        InsertTabOuterContainer.addTab("Step 1", InsertStp1Tab);

        InsertStp2Header.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertStp2Header.setText("Insert into Plan Table");

        lblInsertPlanID.setText("Plan ID");

        lblInsertPlanURL.setText("Plan URL");

        lblInsertPlanType.setText("Plan Type");

        lblInsertQHPStatus.setText("QHP Status");

        lblInsertStatus.setText("Status");

        lblPlanName.setText("Plan Name");

        lblMetalLevel.setText("Metal Level");

        InsertChildOnlyCheck.setText("Select if this is a Child only Plan");
        InsertChildOnlyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertChildOnlyCheckActionPerformed(evt);
            }
        });

        lblChildOnlyPlanID.setText("Child Only Plan ID");

        lblPlanServiceArea.setText("Service Area");

        lblEHBPercentPremium.setText("EHB Perc Premium");

        lblPlanIssuerID.setText("Issuer ID");

        btnInsertINSERT2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertINSERT2.setText("Insert");
        btnInsertINSERT2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertINSERT2ActionPerformed(evt);
            }
        });

        btnInsertNEXT2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertNEXT2.setText("Next");
        btnInsertNEXT2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertNEXT2ActionPerformed(evt);
            }
        });

        PlanID.setText("                                           ");
        PlanID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlanIDActionPerformed(evt);
            }
        });

        InsertPlanURL.setText("                                           ");

        InsertPlanType.setText("                                           ");

        InsertQHPStatus.setText("                                           ");

        InsertStatus.setText("                                           ");

        InsertPlanName.setText("                                           ");

        InsertMetalLvl.setText("                                           ");

        InsertChildPlan.setText("                                           ");

        InsertPlanServArea.setText("                                           ");

        InsertEHBPercPremium.setText("                                           ");

        InsertResultTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(InsertResultTable2);

        IssuerIDdropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        PopulatePlanTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PopulatePlanTable.setText("Populate Table");
        PopulatePlanTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulatePlanTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertStp2TabLayout = new javax.swing.GroupLayout(InsertStp2Tab);
        InsertStp2Tab.setLayout(InsertStp2TabLayout);
        InsertStp2TabLayout.setHorizontalGroup(
            InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStp2TabLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStp2TabLayout.createSequentialGroup()
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblInsertStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPlanName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblMetalLevel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InsertPlanName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InsertStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InsertMetalLvl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InsertChildPlan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InsertPlanServArea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStp2TabLayout.createSequentialGroup()
                                .addGap(563, 563, 563)
                                .addComponent(btnInsertINSERT2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(btnInsertNEXT2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(InsertStp2TabLayout.createSequentialGroup()
                            .addComponent(lblInsertPlanID)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23))
                        .addGroup(InsertStp2TabLayout.createSequentialGroup()
                            .addComponent(lblInsertPlanType, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(InsertPlanType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23))
                        .addGroup(InsertStp2TabLayout.createSequentialGroup()
                            .addComponent(lblInsertQHPStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(InsertQHPStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23))
                        .addGroup(InsertStp2TabLayout.createSequentialGroup()
                            .addComponent(lblInsertPlanURL)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(InsertPlanURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23))
                        .addGroup(InsertStp2TabLayout.createSequentialGroup()
                            .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblEHBPercentPremium)
                                .addComponent(lblPlanServiceArea)
                                .addComponent(lblPlanIssuerID))
                            .addGap(54, 54, 54)
                            .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(InsertEHBPercPremium)
                                .addComponent(IssuerIDdropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(23, 23, 23))
                        .addGroup(InsertStp2TabLayout.createSequentialGroup()
                            .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(InsertStp2TabLayout.createSequentialGroup()
                                    .addComponent(InsertStp2Header)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PopulatePlanTable))
                                .addGroup(InsertStp2TabLayout.createSequentialGroup()
                                    .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(InsertChildOnlyCheck)
                                        .addComponent(lblChildOnlyPlanID))
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addContainerGap()))))
        );
        InsertStp2TabLayout.setVerticalGroup(
            InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStp2TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStp2TabLayout.createSequentialGroup()
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertStp2Header)
                            .addComponent(PopulatePlanTable))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertPlanID)
                            .addComponent(PlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertPlanURL)
                            .addComponent(InsertPlanURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertPlanType)
                            .addComponent(InsertPlanType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertQHPStatus)
                            .addComponent(InsertQHPStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInsertStatus))
                        .addGap(13, 13, 13)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlanName)
                            .addComponent(InsertPlanName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMetalLevel)
                            .addComponent(InsertMetalLvl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(InsertChildOnlyCheck)
                        .addGap(18, 18, 18)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblChildOnlyPlanID)
                            .addComponent(InsertChildPlan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlanServiceArea)
                            .addComponent(InsertPlanServArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEHBPercentPremium)
                            .addComponent(InsertEHBPercPremium, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlanIssuerID)
                            .addComponent(IssuerIDdropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStp2TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnInsertNEXT2)
                    .addComponent(btnInsertINSERT2))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        InsertTabOuterContainer.addTab("Step 2", InsertStp2Tab);

        lblInsertPremium.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblInsertPremium.setText("Insert into Premium Table");

        lblInsertPlanID3.setText("Plan ID");

        lblIndivRate.setText("Individual Rate");

        lblAgeRange.setText("Age Range");

        InsertBeneHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertBeneHeader.setText("Insert into Benefits Table");

        lblBenePlanID.setText("Plan ID");

        lblBeneService.setText("Benefits Service");

        lblBeneDescrip.setText("Benefits Description");

        lblReasonEHB.setText("Reason for EHB Variance");

        lblQuantServ.setText("Qaunity Service Limit");

        InsertBeneCoveredCheck.setText("Check this box if the patient is covered");
        InsertBeneCoveredCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertBeneCoveredCheckActionPerformed(evt);
            }
        });

        InsertBeneEHBCheck.setText("Check this box if there is an EHB Flag");
        InsertBeneEHBCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertBeneEHBCheckActionPerformed(evt);
            }
        });

        InsertCostShareHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertCostShareHeader.setText("Insert into Cost Sharing Table");

        lblInsertCSPlanID.setText("Plan ID");

        lblCSRvar.setText("CSR Variation");

        lblAdvPayment.setText("Advance Payment");

        lblIssuerActuarial.setText("Issuer Acturial Value");

        jButton16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton16.setText("Insert");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton21.setText("Next");

        InsertBeneServ.setText("                                           ");

        InsertAgeRange.setText("                                           ");

        InsertIndivRate.setText("                                           ");

        InsertBeneReasonEHB.setText("                                           ");

        BeneQuantServ.setText("                                           ");

        InsertBeneDescrip.setText("                                           ");

        InsertCSRvar.setText("                                           ");

        InsertAdvancedPayment.setText("                                           ");

        InsertActuarialValue.setText("                                           ");

        InsertResultTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(InsertResultTable3);

        InsertPlanID3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertBenePlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertCSPlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        PopulatePremiumTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulatePremiumTable.setText("Populate Table");
        PopulatePremiumTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulatePremiumTableActionPerformed(evt);
            }
        });

        PopulateBenefitsTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateBenefitsTable.setText("Populate Table");
        PopulateBenefitsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateBenefitsTableActionPerformed(evt);
            }
        });

        PopulateCSTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateCSTable.setText("Populate Table");
        PopulateCSTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateCSTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertStep3TabLayout = new javax.swing.GroupLayout(InsertStep3Tab);
        InsertStep3Tab.setLayout(InsertStep3TabLayout);
        InsertStep3TabLayout.setHorizontalGroup(
            InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep3TabLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                        .addComponent(lblInsertPlanID3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(InsertPlanID3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86))
                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                .addComponent(lblInsertPremium)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulatePremiumTable))
                            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                .addComponent(InsertBeneHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateBenefitsTable))
                            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                .addComponent(InsertCostShareHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateCSTable))
                            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblBeneService)
                                            .addComponent(lblBenePlanID))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(InsertBenePlanID, 0, 171, Short.MAX_VALUE)
                                            .addComponent(InsertBeneServ, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblReasonEHB)
                                            .addComponent(lblQuantServ)
                                            .addComponent(lblBeneDescrip))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(InsertBeneDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(BeneQuantServ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(InsertBeneReasonEHB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                        .addComponent(lblIssuerActuarial)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(InsertActuarialValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(InsertBeneEHBCheck)
                                    .addComponent(InsertBeneCoveredCheck)
                                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblInsertCSPlanID)
                                            .addComponent(lblCSRvar)
                                            .addComponent(lblAdvPayment))
                                        .addGap(22, 22, 22)
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(InsertAdvancedPayment)
                                            .addComponent(InsertCSRvar)
                                            .addComponent(InsertCSPlanID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblIndivRate)
                                            .addComponent(lblAgeRange))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(InsertAgeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(InsertIndivRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 179, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                        .addGap(478, 478, 478)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        InsertStep3TabLayout.setVerticalGroup(
            InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertPremium)
                            .addComponent(PopulatePremiumTable))
                        .addGap(23, 23, 23)
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertPlanID3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInsertPlanID3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InsertIndivRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIndivRate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAgeRange)
                            .addComponent(InsertAgeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertBeneHeader)
                            .addComponent(PopulateBenefitsTable))
                        .addGap(44, 44, 44)
                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblBenePlanID)
                                    .addComponent(InsertBenePlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblBeneService)
                                    .addComponent(InsertBeneServ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InsertBeneCoveredCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InsertBeneEHBCheck)
                                .addGap(1, 1, 1)
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblReasonEHB)
                                            .addComponent(InsertBeneReasonEHB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(BeneQuantServ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblQuantServ))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(InsertBeneDescrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblBeneDescrip))
                                        .addGap(18, 18, 18)
                                        .addComponent(InsertCostShareHeader))
                                    .addComponent(PopulateCSTable))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblInsertCSPlanID)
                                    .addComponent(InsertCSPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(InsertCSRvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCSRvar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAdvPayment)
                                    .addComponent(InsertAdvancedPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblIssuerActuarial)
                                    .addComponent(InsertActuarialValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(InsertStep3TabLayout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(jLabel33))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InsertStep3TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton16)
                    .addComponent(jButton21))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        InsertTabOuterContainer.addTab("Step 3", InsertStep3Tab);

        InsertRefReqHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertRefReqHeader.setText("Insert into Referal Required Table");

        lblInsertRefPlanID.setText("Plan ID");

        lblSpecReq.setText("Specialist Required");

        lblRefReq.setText("Referal Required");

        InsertBeneCostHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertBeneCostHeader.setText("Insert into Benefit Service Cost Table");

        InsertPlanlvlProgramsHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertPlanlvlProgramsHeader.setText("Insert into Plan Level Programs Table");

        lblInsertBeneServ.setText("Benefits Service");

        lblInsertCopay.setText("Copay");

        lblBeneCoin.setText("Coinsurance");

        lblBeneCostPlanID.setText("Plan ID");

        lblPlanLvlPlanID.setText("Plan ID");

        lblTabaccoWell.setText("Tobacco Wellness");

        lblDiseaseMgmt.setText("Disease Management");

        jButton17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton17.setText("Insert");

        jButton22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton22.setText("Next");

        InsertRefPlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertRefReq.setText("jTextField2");

        InsertPlanLvlPlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertTabaccoWellness.setText("jTextField3");

        InsertBeneCostService.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertBeneCopay.setText("jTextField31");

        InsertBeneCostPlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertBeneCoinsurance.setText("jTextField35");

        InsertResultTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(InsertResultTable4);

        InsertDiseaseMgmt.setColumns(20);
        InsertDiseaseMgmt.setRows(5);
        jScrollPane5.setViewportView(InsertDiseaseMgmt);

        InsertSpecialistsRequired.setColumns(20);
        InsertSpecialistsRequired.setRows(5);
        InsertSpecialistsRequired.setToolTipText("Please list the specialists that require a referral.");
        jScrollPane6.setViewportView(InsertSpecialistsRequired);

        PopulateReferralTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateReferralTable.setText("Populate Table");
        PopulateReferralTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateReferralTableActionPerformed(evt);
            }
        });

        PopulateBenefitCostTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateBenefitCostTable.setText("Populate Table");
        PopulateBenefitCostTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateBenefitCostTableActionPerformed(evt);
            }
        });

        PopulatePlanLvlProgramsTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulatePlanLvlProgramsTable.setText("Populate Table");
        PopulatePlanLvlProgramsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulatePlanLvlProgramsTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertStep4TabLayout = new javax.swing.GroupLayout(InsertStep4Tab);
        InsertStep4Tab.setLayout(InsertStep4TabLayout);
        InsertStep4TabLayout.setHorizontalGroup(
            InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addComponent(lblInsertRefPlanID)
                        .addGap(18, 18, 18)
                        .addComponent(InsertRefPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PopulateReferralTable))
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblInsertBeneServ)
                                .addGap(15, 15, 15)
                                .addComponent(InsertBeneCostService, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblPlanLvlPlanID)
                                .addGap(43, 43, 43)
                                .addComponent(InsertPlanLvlPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PopulatePlanLvlProgramsTable))
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblBeneCostPlanID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(InsertBeneCostPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBeneCoin)
                                    .addComponent(lblInsertCopay))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(InsertBeneCopay, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(InsertBeneCoinsurance, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PopulateBenefitCostTable))
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InsertRefReqHeader)
                            .addComponent(InsertBeneCostHeader)
                            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblDiseaseMgmt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep4TabLayout.createSequentialGroup()
                                    .addComponent(lblRefReq)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(InsertRefReq, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep4TabLayout.createSequentialGroup()
                                    .addComponent(lblTabaccoWell)
                                    .addGap(18, 18, 18)
                                    .addComponent(InsertTabaccoWellness, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblSpecReq)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(InsertPlanlvlProgramsHeader))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 797, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))))
        );
        InsertStep4TabLayout.setVerticalGroup(
            InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep4TabLayout.createSequentialGroup()
                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(InsertRefReqHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InsertRefPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PopulateReferralTable))
                            .addComponent(lblInsertRefPlanID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblSpecReq)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRefReq, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(InsertRefReq, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 26, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(InsertBeneCostHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInsertBeneServ, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InsertBeneCostService, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep4TabLayout.createSequentialGroup()
                                .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(InsertBeneCopay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PopulateBenefitCostTable))
                                .addGap(35, 35, 35))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep4TabLayout.createSequentialGroup()
                                .addComponent(lblInsertCopay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBeneCoin, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InsertBeneCoinsurance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBeneCostPlanID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(InsertBeneCostPlanID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(InsertPlanlvlProgramsHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlanLvlPlanID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(InsertPlanLvlPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PopulatePlanLvlProgramsTable)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTabaccoWell)
                            .addComponent(InsertTabaccoWellness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiseaseMgmt)))
                    .addGroup(InsertStep4TabLayout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addGap(9, 9, 9)
                        .addGroup(InsertStep4TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton17)
                            .addComponent(jButton22))
                        .addGap(8, 8, 8)))
                .addGap(47, 47, 47))
        );

        InsertTabOuterContainer.addTab("Step 4", InsertStep4Tab);

        InsertMOOPHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertMOOPHeader.setText("Insert into Max out of Pocket Table");

        lblMOOPplanID.setText("Plan ID");

        lblInNetMOOP.setText("In Network MOOP");

        lblOutNetMOOP.setText("Out of Network MOOP");

        InsertGeoHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertGeoHeader.setText("Insert into Geographic Coverage Table");

        lblOOCcoverage.setText("Out of Country Coverage");

        lblOOScoverage.setText("Out of Service Area Coverage");

        lblGeoPlanID.setText("Plan ID");

        NationalNetCoverageCheck.setText("Check this box if the coverage is in the national Network");

        btnInsertINSERT5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertINSERT5.setText("Insert");

        btnInsertNEXT5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertNEXT5.setText("Next");

        InsertInNetMOOP.setText("                                                         ");

        InsertOutNetMOOP.setText("                                                         ");
        InsertOutNetMOOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertOutNetMOOPActionPerformed(evt);
            }
        });

        InsertOOScoverage.setText("                                                         ");

        InsertOOCcoverage.setText("                                                         ");

        InsertMOOPplanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertGeoPlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertResultTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(InsertResultTable5);

        InsertOOPHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertOOPHeader.setText("Insert into Out-of-Pocket Costs Table");

        lblOOPPlanID.setText("Plan ID");

        InsertOOPplanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblInsertOOPCoin.setText("Default Coins");

        InsertOOPcoinsurance.setText("                                            ");
        InsertOOPcoinsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertOOPcoinsuranceActionPerformed(evt);
            }
        });

        lblOOPCopay.setText("Default Copay");

        InsertOOPcopay.setText("                                            ");

        lblInsertHSAHRA.setText("HSA or HRA?");

        InsertOOPHSAHRA.setText("                                            ");
        InsertOOPHSAHRA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertOOPHSAHRAActionPerformed(evt);
            }
        });

        PopulateMOOPTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateMOOPTable.setText("Populate Table");
        PopulateMOOPTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateMOOPTableActionPerformed(evt);
            }
        });

        PopulateOOPTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateOOPTable.setText("Populate Table");
        PopulateOOPTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateOOPTableActionPerformed(evt);
            }
        });

        PopulateGeoTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateGeoTable.setText("Populate Table");
        PopulateGeoTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateGeoTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertStep5TabLayout = new javax.swing.GroupLayout(InsertStep5Tab);
        InsertStep5Tab.setLayout(InsertStep5TabLayout);
        InsertStep5TabLayout.setHorizontalGroup(
            InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStep5TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                .addComponent(InsertMOOPHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateMOOPTable))
                            .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOOScoverage)
                                    .addComponent(lblOOCcoverage))
                                .addGap(18, 18, 18)
                                .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InsertOOScoverage, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                    .addComponent(InsertOOCcoverage, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                            .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                    .addComponent(lblMOOPplanID)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(InsertMOOPplanID, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                    .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblOutNetMOOP)
                                        .addComponent(lblInNetMOOP))
                                    .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(InsertOutNetMOOP, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep5TabLayout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(InsertInNetMOOP, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep5TabLayout.createSequentialGroup()
                                    .addComponent(lblGeoPlanID)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(InsertGeoPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(NationalNetCoverageCheck)))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep5TabLayout.createSequentialGroup()
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                .addComponent(InsertGeoHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateGeoTable))
                            .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InsertOOPHeader)
                                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                        .addComponent(lblOOPPlanID)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(InsertOOPplanID, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                        .addComponent(lblInsertHSAHRA)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(InsertOOPHSAHRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                        .addComponent(lblOOPCopay)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(InsertOOPcopay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                                        .addComponent(lblInsertOOPCoin)
                                        .addGap(42, 42, 42)
                                        .addComponent(InsertOOPcoinsurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateOOPTable)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep5TabLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnInsertINSERT5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnInsertNEXT5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        InsertStep5TabLayout.setVerticalGroup(
            InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStep5TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsertINSERT5)
                            .addComponent(btnInsertNEXT5)))
                    .addGroup(InsertStep5TabLayout.createSequentialGroup()
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertMOOPHeader)
                            .addComponent(PopulateMOOPTable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertMOOPplanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMOOPplanID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInNetMOOP)
                            .addComponent(InsertInNetMOOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOutNetMOOP)
                            .addComponent(InsertOutNetMOOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertOOPHeader)
                            .addComponent(PopulateOOPTable))
                        .addGap(17, 17, 17)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOOPPlanID)
                            .addComponent(InsertOOPplanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertOOPCoin)
                            .addComponent(InsertOOPcoinsurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOOPCopay)
                            .addComponent(InsertOOPcopay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertHSAHRA)
                            .addComponent(InsertOOPHSAHRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertGeoHeader)
                            .addComponent(PopulateGeoTable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGeoPlanID)
                            .addComponent(InsertGeoPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NationalNetCoverageCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOOScoverage)
                            .addComponent(InsertOOScoverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep5TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOOCcoverage)
                            .addComponent(InsertOOCcoverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        InsertTabOuterContainer.addTab("Step 5", InsertStep5Tab);

        InsertINDeductHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertINDeductHeader.setText("Insert Into In-Network Deductable Table");

        lblINnetPlanID.setText("Plan ID");

        lblINnetPedDentDeduct.setText("In-network Pediatric Dental Deductable");

        lblINnetMedDeduct.setText("In-network Medical Deductable");

        lblINnetDrugDeduct.setText("In-network Drug Deductable ");

        InsertINdeductcheck.setText("Check if it is a combined deductable");

        lblINnetComboDeduct.setText("In-network Combined Deductable");

        btnInsertINSERT6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertINSERT6.setText("Insert");

        InsertINnetPedDentDeduct.setText("                                            ");
        InsertINnetPedDentDeduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertINnetPedDentDeductActionPerformed(evt);
            }
        });

        InsertINnetMedDeduct.setText("                                            ");
        InsertINnetMedDeduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertINnetMedDeductActionPerformed(evt);
            }
        });

        InsertINnetDrugDeduct.setText("                                            ");

        InsertINnetComboDeduct.setText("                                            ");

        btnInsertSAVE.setBackground(new java.awt.Color(0, 204, 204));
        btnInsertSAVE.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsertSAVE.setText("Save");
        btnInsertSAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertSAVEActionPerformed(evt);
            }
        });

        InsertInNetworPlanID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        InsertResultTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(InsertResultTable6);

        InsertOONDeductHeader.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        InsertOONDeductHeader.setText("Insert into Out-Of-Network Deductable Table");

        lblOONPlanID.setText("Plan ID");

        InsertOONDeduct.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblinNetPedDent.setText("Out-of-network Pediatric Dental");

        InsertOONPedDent.setText("                                                         ");

        lblInNetMed.setText("Out-of-network Medical Deductable");

        InsertOONnetMed.setText("                                                         ");

        lblINnetDrug.setText("Out-of-network Drug Deductable");

        InsertOONDrugDeduct.setText("                                                         ");

        CombinedDeductCheck.setText("Check if it's a combined deductable");
        CombinedDeductCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CombinedDeductCheckActionPerformed(evt);
            }
        });

        lblINnetCombined.setText("Out-of-network Combined Deductable");

        InsertOONComboDeduct.setText("                                                         ");
        InsertOONComboDeduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertOONComboDeductActionPerformed(evt);
            }
        });

        PopulateINnetDeductTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateINnetDeductTable.setText("Populate Table");
        PopulateINnetDeductTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateINnetDeductTableActionPerformed(evt);
            }
        });

        PopulateOONDeductTable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        PopulateOONDeductTable.setText("Populate Table");
        PopulateOONDeductTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopulateOONDeductTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InsertStep6TabLayout = new javax.swing.GroupLayout(InsertStep6Tab);
        InsertStep6Tab.setLayout(InsertStep6TabLayout);
        InsertStep6TabLayout.setHorizontalGroup(
            InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStep6TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep6TabLayout.createSequentialGroup()
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblINnetPedDentDeduct)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(InsertINnetPedDentDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addComponent(InsertINdeductcheck)
                                .addGroup(InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblINnetComboDeduct)
                                    .addGap(18, 18, 18)
                                    .addComponent(InsertINnetComboDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InsertStep6TabLayout.createSequentialGroup()
                                    .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblINnetMedDeduct)
                                        .addComponent(lblINnetDrugDeduct))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(InsertINnetDrugDeduct)
                                        .addComponent(InsertINnetMedDeduct))))
                            .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblOONPlanID)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(InsertOONDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblINnetCombined)
                                    .addGap(18, 18, 18)
                                    .addComponent(InsertOONComboDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addComponent(CombinedDeductCheck, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblINnetDrug)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(InsertOONDrugDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblInNetMed)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(InsertOONnetMed, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep6TabLayout.createSequentialGroup()
                                    .addComponent(lblinNetPedDent)
                                    .addGap(26, 26, 26)
                                    .addComponent(InsertOONPedDent, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(InsertStep6TabLayout.createSequentialGroup()
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(InsertStep6TabLayout.createSequentialGroup()
                                .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InsertStep6TabLayout.createSequentialGroup()
                                        .addComponent(lblINnetPlanID)
                                        .addGap(18, 18, 18)
                                        .addComponent(InsertInNetworPlanID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(InsertINDeductHeader, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateINnetDeductTable))
                            .addGroup(InsertStep6TabLayout.createSequentialGroup()
                                .addComponent(InsertOONDeductHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PopulateOONDeductTable)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InsertStep6TabLayout.createSequentialGroup()
                        .addComponent(btnInsertINSERT6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnInsertSAVE, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InsertStep6TabLayout.setVerticalGroup(
            InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InsertStep6TabLayout.createSequentialGroup()
                .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(InsertStep6TabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertOONDeductHeader)
                            .addComponent(PopulateOONDeductTable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOONPlanID)
                            .addComponent(InsertOONDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblinNetPedDent)
                            .addComponent(InsertOONPedDent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInNetMed)
                            .addComponent(InsertOONnetMed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetDrug)
                            .addComponent(InsertOONDrugDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CombinedDeductCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetCombined)
                            .addComponent(InsertOONComboDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InsertINDeductHeader)
                            .addComponent(PopulateINnetDeductTable))
                        .addGap(19, 19, 19)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetPlanID)
                            .addComponent(InsertInNetworPlanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetPedDentDeduct)
                            .addComponent(InsertINnetPedDentDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetMedDeduct)
                            .addComponent(InsertINnetMedDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetDrugDeduct)
                            .addComponent(InsertINnetDrugDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(InsertINdeductcheck)
                        .addGap(18, 18, 18)
                        .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblINnetComboDeduct)
                            .addComponent(InsertINnetComboDeduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InsertStep6TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertINSERT6)
                    .addComponent(btnInsertSAVE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        InsertTabOuterContainer.addTab("Step 6", InsertStep6Tab);

        javax.swing.GroupLayout InsertTabContainerLayout = new javax.swing.GroupLayout(InsertTabContainer);
        InsertTabContainer.setLayout(InsertTabContainerLayout);
        InsertTabContainerLayout.setHorizontalGroup(
            InsertTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1306, Short.MAX_VALUE)
            .addGroup(InsertTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(InsertTabOuterContainer))
        );
        InsertTabContainerLayout.setVerticalGroup(
            InsertTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
            .addGroup(InsertTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(InsertTabOuterContainer))
        );

        MainMenuTab.addTab("Insert Template", InsertTabContainer);

        QueryTabContainer.setBackground(new java.awt.Color(255, 255, 255));

        QueryResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        QueryTableContainer.setViewportView(QueryResultTable);

        lblCustomSQLQueryBtn.setForeground(new java.awt.Color(255, 0, 0));
        lblCustomSQLQueryBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCustomSQLQueryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/warning-icon.png"))); // NOI18N
        lblCustomSQLQueryBtn.setText("<html><b>WARNING!</b> Only use \"Custom SQL Query\" option if you are familiar with SQL programming language!</html>");
        lblCustomSQLQueryBtn.setToolTipText("WARNING!");
        lblCustomSQLQueryBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.red, java.awt.Color.darkGray));

        lblQueryTabIntro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblQueryTabIntro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/MHBElogo.jpg"))); // NOI18N
        lblQueryTabIntro.setText("<html>This tab allows users to ask specific questions of the database. Please select one of the pre-defined query options to the right and a pop-up will open allowing you to set parameters for your query.</html>");

        QueryDropdownList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Display Query", "Find Min Query", "Find Max Query", "Comparison Query", "Print Table Query", "Custom SQL Query" }));
        QueryDropdownList.setToolTipText("Select a predefined query and input parameters.");
        QueryDropdownList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryDropdownListActionPerformed(evt);
            }
        });

        lblQueryDropdown.setLabelFor(QueryDropdownList);
        lblQueryDropdown.setText("Select a pre-defined Query");

        javax.swing.GroupLayout QueryTabContainerLayout = new javax.swing.GroupLayout(QueryTabContainer);
        QueryTabContainer.setLayout(QueryTabContainerLayout);
        QueryTabContainerLayout.setHorizontalGroup(
            QueryTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueryTabContainerLayout.createSequentialGroup()
                .addGroup(QueryTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(QueryTabContainerLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(QueryTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(QueryDropdownList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblQueryDropdown, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
                    .addGroup(QueryTabContainerLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(lblCustomSQLQueryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(QueryTableContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 937, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(QueryTabContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQueryTabIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        QueryTabContainerLayout.setVerticalGroup(
            QueryTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QueryTabContainerLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lblQueryTabIntro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(QueryTabContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(QueryTabContainerLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblQueryDropdown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QueryDropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184)
                        .addComponent(lblCustomSQLQueryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(QueryTabContainerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QueryTableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        MainMenuTab.addTab("Query Database", QueryTabContainer);

        FileMenu.setBackground(new java.awt.Color(255, 255, 255));
        FileMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FileDropdown.setBackground(new java.awt.Color(255, 255, 255));
        FileDropdown.setText("File");

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/Actions-application-exit-icon.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        FileDropdown.add(Exit);

        FileMenu.add(FileDropdown);

        HelpDropdown.setText("Help");

        HelpMenuOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        HelpMenuOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/help-file-icon.png"))); // NOI18N
        HelpMenuOption.setText("Help PDF");
        HelpMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMenuOptionActionPerformed(evt);
            }
        });
        HelpDropdown.add(HelpMenuOption);

        AboutMenuOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/Actions-help-about-icon.png"))); // NOI18N
        AboutMenuOption.setText("About");
        HelpDropdown.add(AboutMenuOption);

        FileMenu.add(HelpDropdown);

        setJMenuBar(FileMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainMenuTab, javax.swing.GroupLayout.PREFERRED_SIZE, 1311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(MainMenuTab))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QueryDropdownListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryDropdownListActionPerformed
    String[] columnNames=null;
        String sql = null;
        if((QueryDropdownList.getSelectedItem().toString()).equalsIgnoreCase("Display Query")) {
            // create a pop-up window to take input 
            DisplayDialog.setVisible(true);
        }
        if((QueryDropdownList.getSelectedItem().toString()).equalsIgnoreCase("Find Min Query")) {
            // create a pop-up window to take input 
            FindMinDialog.setVisible(true);
        }
        if((QueryDropdownList.getSelectedItem().toString()).equalsIgnoreCase("Max Query")) {
            // create a pop-up window to take input
            FindMaxDialog.setVisible(true);
        }
        if((QueryDropdownList.getSelectedItem().toString()).equalsIgnoreCase("Comparison Query")) {
            // create a pop-up window to take input
            CompareDialog.setVisible(true);            
        }
        if((QueryDropdownList.getSelectedItem().toString()).equalsIgnoreCase("Print Table Query")) {
            // create a pop-up window to take input 
            PrintTableDIalog.setVisible(true);          
        }
        if((QueryDropdownList.getSelectedItem().toString()).equalsIgnoreCase("Custom SQL Query")) {
            // create a pop-up window to take input 
            CustomSQLdialog.setVisible(true);            
        }
        
    }//GEN-LAST:event_QueryDropdownListActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void HelpMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMenuOptionActionPerformed
                // TODO add your handling code here:
    }//GEN-LAST:event_HelpMenuOptionActionPerformed

    private void DisplayTblSelectionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayTblSelectionMenuActionPerformed
        String[] columnNames=null;
        String sql = null;
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Provider")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Provider";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Plan")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Plan";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Plan-Level Programs")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Plan_lvl_programs";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Benefits")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Benefits";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Cost Sharing")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Cost_sharing";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Service Cost")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Service_cost";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Dates")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Dates";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Exclusions")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Exclusions";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Geographic Coverage")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Geo_covarage";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("In-Network Deductible")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM In_network_deductible";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Out-of-Network Deductible")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Out_network_deductible";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Out-of-pocket Costs")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Out_of_pocket";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Referral Required")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Referral_required";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Maximum Out-of-pocket")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM MOOP";            
        }
        if((DisplayTblSelectionMenu.getSelectedItem().toString()).equalsIgnoreCase("Premium")) {
            // create a table model and set a Column Identifiers to this model 
            sql = "SELECT * FROM Premium";            
        }
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(sql);
            ResultSet rs = s.executeQuery(sql);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        QueryResultTable.setModel(model);
    }//GEN-LAST:event_DisplayTblSelectionMenuActionPerformed

    private void InsertIssuerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertIssuerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertIssuerNameActionPerformed

    private void InsertIssuerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertIssuerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertIssuerIDActionPerformed

    private void InsertServiceAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertServiceAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertServiceAreaActionPerformed

    private void btnInsertNEXT1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertNEXT1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertNEXT1ActionPerformed

    private void InsertChildOnlyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertChildOnlyCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertChildOnlyCheckActionPerformed

    private void btnInsertINSERT2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertINSERT2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertINSERT2ActionPerformed

    private void btnInsertNEXT2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertNEXT2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertNEXT2ActionPerformed

    private void PlanIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlanIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlanIDActionPerformed

    private void InsertBeneCoveredCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertBeneCoveredCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertBeneCoveredCheckActionPerformed

    private void InsertBeneEHBCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertBeneEHBCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertBeneEHBCheckActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton16ActionPerformed

    private void CombinedDeductCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CombinedDeductCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CombinedDeductCheckActionPerformed

    private void InsertOutNetMOOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertOutNetMOOPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertOutNetMOOPActionPerformed

    private void InsertOONComboDeductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertOONComboDeductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertOONComboDeductActionPerformed

    private void InsertOOPcoinsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertOOPcoinsuranceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertOOPcoinsuranceActionPerformed

    private void InsertOOPHSAHRAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertOOPHSAHRAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertOOPHSAHRAActionPerformed

    private void InsertINnetPedDentDeductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertINnetPedDentDeductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertINnetPedDentDeductActionPerformed

    private void InsertINnetMedDeductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertINnetMedDeductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InsertINnetMedDeductActionPerformed

    private void btnInsertSAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertSAVEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertSAVEActionPerformed

    private void MinTblListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinTblListActionPerformed
        String[] columnNames=null;
        String Table = null;
        String sql = null;
        

        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Plan")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Plan";
        }
 
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Cost Sharing")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Cost_sharing";   
        }
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Service Cost")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Service_cost";        
        }           
        
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("In-Network Deductible")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "In_network_deductible";    
        }
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Out-of-Network Deductible")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Out_network_deductible";    
        }
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Out-of-pocket Costs")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Out_of_pocket";   
        }
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Maximum Out-of-pocket")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "MOOP";   
        }
        if((MinTblList.getSelectedItem().toString()).equalsIgnoreCase("Premium")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Premium";        
        }
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            
            
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            int columncount = columnNames.length;
            for (int j=0; j<columncount; j++){
                sql = "" + columnNames[j] + ", " ;
            }
            sql = "Select MIN(" + sql + ") FROM " + Table + ";";
            Statement s = objDBConnection.prepareStatement(sql);
            System.out.println(s);
            ResultSet rs = s.executeQuery(sql);
            
            columns=columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        QueryResultTable.setModel(model);
    }//GEN-LAST:event_MinTblListActionPerformed

    private void InsertTabOuterContainerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InsertTabOuterContainerFocusGained
                // TODO add your handling code here:
    }//GEN-LAST:event_InsertTabOuterContainerFocusGained

    private void PopulateProviderTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateProviderTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Provider";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertProviderTable.setModel(model);
    }//GEN-LAST:event_PopulateProviderTableActionPerformed

    private void PopulatePlanTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulatePlanTableActionPerformed
       String[] columnNames=null;
        String query = "SELECT * FROM Plan";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable2.setModel(model);
    }//GEN-LAST:event_PopulatePlanTableActionPerformed

    private void PopulatePremiumTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulatePremiumTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Premium";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable3.setModel(model);
    }//GEN-LAST:event_PopulatePremiumTableActionPerformed

    private void PopulateBenefitsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateBenefitsTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Benefits";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable3.setModel(model);
    }//GEN-LAST:event_PopulateBenefitsTableActionPerformed

    private void PopulateCSTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateCSTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Cost_sharing";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable3.setModel(model);
    }//GEN-LAST:event_PopulateCSTableActionPerformed

    private void PopulateReferralTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateReferralTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Referral_required";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable4.setModel(model);
    }//GEN-LAST:event_PopulateReferralTableActionPerformed

    private void PopulateBenefitCostTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateBenefitCostTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Service_cost";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable4.setModel(model);
    }//GEN-LAST:event_PopulateBenefitCostTableActionPerformed

    private void PopulatePlanLvlProgramsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulatePlanLvlProgramsTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Plan_lvl_programs";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable4.setModel(model);
    }//GEN-LAST:event_PopulatePlanLvlProgramsTableActionPerformed

    private void PopulateMOOPTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateMOOPTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM MOOP";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable5.setModel(model);
    }//GEN-LAST:event_PopulateMOOPTableActionPerformed

    private void PopulateOOPTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateOOPTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Out_of_pocket";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable5.setModel(model);
    }//GEN-LAST:event_PopulateOOPTableActionPerformed

    private void PopulateGeoTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateGeoTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Geo_covarage";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable5.setModel(model);
    }//GEN-LAST:event_PopulateGeoTableActionPerformed

    private void PopulateOONDeductTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateOONDeductTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM Out_network_deductible";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable6.setModel(model);
    }//GEN-LAST:event_PopulateOONDeductTableActionPerformed

    private void PopulateINnetDeductTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopulateINnetDeductTableActionPerformed
        String[] columnNames=null;
        String query = "SELECT * FROM In_network_deductible";
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(query);
            ResultSet rs = s.executeQuery(query);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        InsertResultTable6.setModel(model);
    }//GEN-LAST:event_PopulateINnetDeductTableActionPerformed
    private void loadTableData(String tblName) {
        model = new javax.swing.table.DefaultTableModel();
        selectSQL = "SELECT * FROM " +tableName;
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(selectSQL);
            ResultSet rs = s.executeQuery(selectSQL);
            ResultSetMetaData meta = rs.getMetaData();
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            
            model.setColumnIdentifiers(columnNames);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            }        
        
        // set the model to the table
        ModifyResultTable.setModel(model);
    }
    private void deleteTblDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTblDataActionPerformed

        model = (javax.swing.table.DefaultTableModel) ModifyResultTable.getModel();
        
       // get selected row index
       int rowCount = ModifyResultTable.getSelectedRowCount();
       
       if(rowCount == 0) {
        JOptionPane.showMessageDialog(this, "Please select a record to delete", "Row not selected", JOptionPane.WARNING_MESSAGE);    
       }
       
       if (rowCount == 1) {
        int response = JOptionPane.showConfirmDialog(null, "Do you want to continue?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.NO_OPTION) {
        System.out.println("No button clicked");
        } else if (response == JOptionPane.YES_OPTION){
       try{
       
        int SelectedRowIndex = ModifyResultTable.getSelectedRow();
        deleteSQL = "DELETE FROM "+tableName+" WHERE ";
        
        for(int i=0; i < columnNames.length; i++) {
            deleteSQL = deleteSQL + columnNames[i] + " = '" +
                    ModifyResultTable.getModel().getValueAt(ModifyResultTable.getSelectedRow(), i) + "' ";
            if (i < columnNames.length-1)
                deleteSQL = deleteSQL + " AND ";
        }
        
        PreparedStatement preparedStatement = objDBConnection.prepareStatement(deleteSQL);
        int result = preparedStatement.executeUpdate();
        
        if(result == 1) {
            model.removeRow(SelectedRowIndex);       
            JOptionPane.showMessageDialog(this, "Record is deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Record deletion is unsuccessful.");
        }
       
       }catch(Exception ex)
       {
           JOptionPane.showMessageDialog(this, ex);
           //ex.printStackTrace();
       }
       }
        else if (response == JOptionPane.CLOSED_OPTION) {
      System.out.println("JOptionPane closed");
        }
       }
       
       if (rowCount > 1) {
           JOptionPane.showMessageDialog(this, "Please select only one record to delete", "Many rows selected", JOptionPane.WARNING_MESSAGE);    
       }
    }//GEN-LAST:event_deleteTblDataActionPerformed

    private void updateTblDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTblDataActionPerformed
        //this.setVisible(true);
        
        
        model = (javax.swing.table.DefaultTableModel) ModifyResultTable.getModel();
        
       // get selected row index
       int rowCount = ModifyResultTable.getSelectedRowCount();
       
       if(rowCount == 0) {
        JOptionPane.showMessageDialog(this, "Please select a record to update", "Row not selected", JOptionPane.WARNING_MESSAGE);    
       }
       
       if (rowCount == 1) {
        
       try{
       
        //int SelectedRowIndex = ModifyResultTable.getSelectedRow();
        UpdateDataDialog.strTableName = tableName;
	UpdateDataDialog.strColNames = columnNames;
        UpdateDataDialog.objUDDBConnection = objDBConnection;
		
        Object[] objColValues = new Object[columnNames.length];
        for(int i=0; i < columnNames.length; i++) {
            objColValues[i] = ModifyResultTable.getModel().getValueAt(ModifyResultTable.getSelectedRow(), i);
//            deleteSQL = deleteSQL + columnNames[i] + " = '" +
//                    ModifyResultTable.getModel().getValueAt(ModifyResultTable.getSelectedRow(), i) + "' ";
//            if (i < columnNames.length-1)
//                deleteSQL = deleteSQL + " AND ";
        }
		UpdateDataDialog.objColValues = objColValues;
		objUpdateData = new UpdateDataDialog(MainMenu.this, true);
        objUpdateData.loadData(tableName, columnNames, objColValues);
//        objUpdateData.setVisible(true);
           loadTableData(tableName);
//        this.ModifyResultTable.repaint();
        //objUpdateData.getParent().repaint();
        /*deleteSQL = "DELETE FROM "+tableName+" WHERE ";
        
        for(int i=0; i < columnNames.length; i++) {
            deleteSQL = deleteSQL + columnNames[i] + " = '" +
                    ModifyResultTable.getModel().getValueAt(ModifyResultTable.getSelectedRow(), i) + "' ";
            if (i < columnNames.length-1)
                deleteSQL = deleteSQL + " AND ";
        }
        
        PreparedStatement preparedStatement = objDBConnection.prepareStatement(deleteSQL);
        int result = preparedStatement.executeUpdate();
        
        if(result == 1) {
            model.removeRow(SelectedRowIndex);       
            JOptionPane.showMessageDialog(this, "Record is deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Record deletion is unsuccessful.");
        } */
       
       }catch(Exception ex)
       {
           JOptionPane.showMessageDialog(this, ex);
           //ex.printStackTrace();
       }
       
       }
       
       if (rowCount > 1) {
           JOptionPane.showMessageDialog(this, "Please select only one record to update", "Many rows selected", JOptionPane.WARNING_MESSAGE);    
       }
    }//GEN-LAST:event_updateTblDataActionPerformed

    private void ModifyResultTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModifyResultTableMouseReleased
        updateTblData.setEnabled(true);
        deleteTblData.setEnabled(true);
    }//GEN-LAST:event_ModifyResultTableMouseReleased

    private void ModifyResultTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ModifyResultTableKeyReleased
        updateTblData.setEnabled(true);
        deleteTblData.setEnabled(true);
    }//GEN-LAST:event_ModifyResultTableKeyReleased

    private void ModifyTableDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyTableDropdownActionPerformed

        if(ModifyTableDropdown.getSelectedIndex() > -1) {

            ModifyResultTable.setDefaultEditor(Object.class, null);
        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Provider Table")) {

            tableName = "Provider";
        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Plan Table")) {

            tableName = "Plan";
        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Plan Level Programs Table")) {

            tableName ="Plan_lvl_programs";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Benefit Table")) {

            tableName = "Benefits";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Cost Sharing Table")) {

            tableName = "Cost_sharing";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Service Cost Table")) {

            tableName = "Service_cost";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Dates Table")) {

            tableName = "Dates";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Exclusions Table")) {

            tableName = "Exclusions";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Geographic Coverage Table")) {

            tableName = "Geo_covarage";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("In Network Deductible Table")) {

            tableName = "In_network_deductible";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Out-of-Network Deductible Table")) {

            tableName = "Out_network_deductible";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Out-of-pocket Table")) {

            tableName = "Out_of_pocket";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Referral Required Table")) {

            tableName = "Referral_required";

        }
        if((ModifyTableDropdown.getSelectedItem().toString()).equalsIgnoreCase("Maximum Out-of-pocket Table")) {

            tableName = "MOOP";

        }
        //
        loadTableData(tableName);
    }//GEN-LAST:event_ModifyTableDropdownActionPerformed

    private void MaxTblListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxTblListActionPerformed
        String[] columnName=null;
        String Table = null;
        String sql = null;
        int i=1;

        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Plan")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Plan";
            MinColList.addItem("EHB Percent of Premium");
            columnName[i] = "EHB_Perc_Premium";
        }
 
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Cost Sharing")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Cost_sharing";   
            MaxColList.addItem("Issuer Actuarial Value");
            MaxColList.addItem("Advanced payment for Cost-sharing Variant");
            columnName[i] = "IssuerActuarialValue";
            columnName[i+1]= "Adv_payment";
        }
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Service Cost")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Service_cost";        
            MaxColList.addItem("Copay");
            MaxColList.addItem("Coinsurance");
            columnName[i] = "Copay";
            columnName[i+1]="Coinsurance";
        }           
        
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("In-Network Deductible")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "In_network_deductible";    
            MaxColList.addItem("In-Network Pediatric Dental Deductable");
            MaxColList.addItem("In-Network Medical Deductable");
            MaxColList.addItem("In-Network Drug Deductable");
            MaxColList.addItem("In-Network Combined Deductable");
            columnName[i] = "In_net_ped_dent_deduct";
            columnName[i+1]="In_net_med";
            columnName[i+2]="In_network_drug";
            columnName[i+3]="In_net_combined";
        }
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Out-of-Network Deductible")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Out_network_deductible";    
            MaxColList.addItem("Out-of-Network Pediatric Dental Deductable");
            MaxColList.addItem("Out-of-Network Medical Deductable");
            MaxColList.addItem("Out-of-Network Drug Deductable");
            MaxColList.addItem("Out-of-Network Combined Deductable");
            columnName[i] = "Out_net_ped_dent_deduct";
            columnName[i+1]="Out_net_medical";
            columnName[i+2]="Out_net_drug";
            columnName[i+3]="Out_net_combined";
        }
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Out-of-pocket Costs")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Out_of_pocket";   
            MaxColList.addItem("Default Coinsurance");
            MaxColList.addItem("Default Copay");
            columnName[i]="Default_Coins";
            columnName[i+1]="Default_Copay";
        }
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Maximum Out-of-pocket")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "MOOP";   
            MaxColList.addItem("In-network Maximum Out-of-pocket");
            MaxColList.addItem("Out-of-network Maximum Out-of-pocket");
            columnName[i]="In_net_MOOP";
            columnName[i+1]="Out_net_MOOP";
        }
        if((MaxTblList.getSelectedItem().toString()).equalsIgnoreCase("Premium")) {
            // create a table model and set a Column Identifiers to this model 
            Table = "Premium";        
            MaxColList.addItem("Individual Insurance Premium Rate");
            MaxColList.addItem("Age Range");
            columnName[i]="Indiv_Rate";
            columnName[i+1]="Age_Range";
        }
        Object[] columns = null;
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        
        try {
            //PREPARED STMT
            
            
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            int columncount = columnName.length;
            for (int j=1; j<=columncount; j++){
                sql = sql + ", " + columnName[j];
            }
            sql = "Select MAX(" + sql + ") FROM " + Table + ";";
            Statement s = objDBConnection.prepareStatement(sql);
            ResultSet rs = s.executeQuery(sql);
            
            columns = columnName;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        QueryResultTable.setModel(model);
    }//GEN-LAST:event_MaxTblListActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        String columns[]=null;
        String sql = CustomSQLQuery.getText();  
        try {
            //PREPARED STMT
            Statement s = objDBConnection.prepareStatement(sql);
            ResultSet rs = s.executeQuery(sql);
            ResultSetMetaData meta = rs.getMetaData();
            //columns = new Object[rs.getFetchSize()];
            //LOOP THRU GETTING ALL VALUES
            Integer columncount = meta.getColumnCount();
            columnNames = new String[columncount];
            
            for (int i = 1; i <= columncount; i++) {                
                //System.out.println(meta.getColumnName(i));
                columnNames[i-1] = meta.getColumnName(i);
              }
            columns = columnNames;
            model.setColumnIdentifiers(columns);
            
            model.setRowCount(0);
            
            while(rs.next()) {
                String[] obj = new String[columncount];
                for(int j=0; j<columncount; j++){
                    obj[j] = rs.getString(j+1);
                }
                model.addRow(obj);
            }
            }catch (Exception ex) {
                ex.printStackTrace();
            } 
        
        
        
        // set the model to the table
        QueryResultTable.setModel(model);// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
                
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuOption;
    private javax.swing.JTextField BeneQuantServ;
    private javax.swing.JCheckBox CombinedDeductCheck;
    private javax.swing.JDialog CompareDialog;
    private javax.swing.JDialog CustomSQLdialog;
    private javax.swing.JDialog DisplayDialog;
    private javax.swing.JLabel DisplayMHBELogo;
    private javax.swing.JComboBox<String> DisplayTblSelectionMenu;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu FileDropdown;
    private javax.swing.JMenuBar FileMenu;
    private javax.swing.JDialog FindMaxDialog;
    private javax.swing.JLabel FindMaxMHBELogo;
    private javax.swing.JDialog FindMinDialog;
    private javax.swing.JLabel FindMinMaxMHBELogo;
    private javax.swing.JMenu HelpDropdown;
    private javax.swing.JMenuItem HelpMenuOption;
    private javax.swing.JTextField InsertActuarialValue;
    private javax.swing.JTextField InsertAdvancedPayment;
    private javax.swing.JTextField InsertAgeRange;
    private javax.swing.JTextField InsertBeneCoinsurance;
    private javax.swing.JTextField InsertBeneCopay;
    private javax.swing.JLabel InsertBeneCostHeader;
    private javax.swing.JComboBox<String> InsertBeneCostPlanID;
    private javax.swing.JComboBox<String> InsertBeneCostService;
    private javax.swing.JCheckBox InsertBeneCoveredCheck;
    private javax.swing.JTextField InsertBeneDescrip;
    private javax.swing.JCheckBox InsertBeneEHBCheck;
    private javax.swing.JLabel InsertBeneHeader;
    private javax.swing.JComboBox<String> InsertBenePlanID;
    private javax.swing.JTextField InsertBeneReasonEHB;
    private javax.swing.JTextField InsertBeneServ;
    private javax.swing.JComboBox<String> InsertCSPlanID;
    private javax.swing.JTextField InsertCSRvar;
    private javax.swing.JCheckBox InsertChildOnlyCheck;
    private javax.swing.JTextField InsertChildPlan;
    private javax.swing.JLabel InsertCostShareHeader;
    private javax.swing.JTextArea InsertDiseaseMgmt;
    private javax.swing.JTextField InsertEHBPercPremium;
    private javax.swing.JLabel InsertGeoHeader;
    private javax.swing.JComboBox<String> InsertGeoPlanID;
    private javax.swing.JLabel InsertINDeductHeader;
    private javax.swing.JCheckBox InsertINdeductcheck;
    private javax.swing.JTextField InsertINnetComboDeduct;
    private javax.swing.JTextField InsertINnetDrugDeduct;
    private javax.swing.JTextField InsertINnetMedDeduct;
    private javax.swing.JTextField InsertINnetPedDentDeduct;
    private javax.swing.JTextField InsertInNetMOOP;
    private javax.swing.JComboBox<String> InsertInNetworPlanID;
    private javax.swing.JTextField InsertIndivRate;
    private javax.swing.JTextField InsertIssuerID;
    private javax.swing.JTextField InsertIssuerName;
    private javax.swing.JLabel InsertMHBELogo1;
    private javax.swing.JLabel InsertMOOPHeader;
    private javax.swing.JComboBox<String> InsertMOOPplanID;
    private javax.swing.JTextField InsertMetalLvl;
    private javax.swing.JTextField InsertOOCcoverage;
    private javax.swing.JTextField InsertOONComboDeduct;
    private javax.swing.JComboBox<String> InsertOONDeduct;
    private javax.swing.JLabel InsertOONDeductHeader;
    private javax.swing.JTextField InsertOONDrugDeduct;
    private javax.swing.JTextField InsertOONPedDent;
    private javax.swing.JTextField InsertOONnetMed;
    private javax.swing.JTextField InsertOOPHSAHRA;
    private javax.swing.JLabel InsertOOPHeader;
    private javax.swing.JTextField InsertOOPcoinsurance;
    private javax.swing.JTextField InsertOOPcopay;
    private javax.swing.JComboBox<String> InsertOOPplanID;
    private javax.swing.JTextField InsertOOScoverage;
    private javax.swing.JTextField InsertOutNetMOOP;
    private javax.swing.JComboBox<String> InsertPlanID3;
    private javax.swing.JComboBox<String> InsertPlanLvlPlanID;
    private javax.swing.JTextField InsertPlanName;
    private javax.swing.JTextField InsertPlanServArea;
    private javax.swing.JTextField InsertPlanType;
    private javax.swing.JTextField InsertPlanURL;
    private javax.swing.JLabel InsertPlanlvlProgramsHeader;
    private javax.swing.JTable InsertProviderTable;
    private javax.swing.JTextField InsertQHPStatus;
    private javax.swing.JComboBox<String> InsertRefPlanID;
    private javax.swing.JTextField InsertRefReq;
    private javax.swing.JLabel InsertRefReqHeader;
    private javax.swing.JTable InsertResultTable2;
    private javax.swing.JTable InsertResultTable3;
    private javax.swing.JTable InsertResultTable4;
    private javax.swing.JTable InsertResultTable5;
    private javax.swing.JTable InsertResultTable6;
    private javax.swing.JTextField InsertServiceArea;
    private javax.swing.JTextArea InsertSpecialistsRequired;
    private javax.swing.JPanel InsertStartTab;
    private javax.swing.JTextField InsertStatus;
    private javax.swing.JPanel InsertStep3Tab;
    private javax.swing.JPanel InsertStep4Tab;
    private javax.swing.JPanel InsertStep5Tab;
    private javax.swing.JPanel InsertStep6Tab;
    private javax.swing.JLabel InsertStp1Header;
    private javax.swing.JPanel InsertStp1Tab;
    private javax.swing.JLabel InsertStp2Header;
    private javax.swing.JPanel InsertStp2Tab;
    private javax.swing.JPanel InsertTabContainer;
    private javax.swing.JLabel InsertTabDescription;
    private javax.swing.JTabbedPane InsertTabOuterContainer;
    private javax.swing.JTextField InsertTabaccoWellness;
    private javax.swing.JComboBox<String> IssuerIDdropdown;
    private javax.swing.JPanel MMOuterContainer;
    private javax.swing.JLabel MMWelcome;
    private javax.swing.JPanel MMinnerContainer;
    private javax.swing.JLabel MMintroText;
    private javax.swing.JTabbedPane MainMenuTab;
    private javax.swing.JComboBox<String> MaxColList;
    private javax.swing.JComboBox<String> MaxTblList;
    private javax.swing.JComboBox<String> MinColList;
    private javax.swing.JComboBox<String> MinTblList;
    private javax.swing.JPanel ModSidePanel;
    private javax.swing.JLabel ModifyMHBELogo;
    private javax.swing.JTable ModifyResultTable;
    private javax.swing.JPanel ModifyTabContainer;
    private javax.swing.JLabel ModifyTabDescription;
    private javax.swing.JComboBox<String> ModifyTableDropdown;
    private javax.swing.JScrollPane ModifyTableScrollPane;
    private javax.swing.JCheckBox NationalNetCoverageCheck;
    private javax.swing.JTextField PlanID;
    private javax.swing.JToggleButton PopulateBenefitCostTable;
    private javax.swing.JToggleButton PopulateBenefitsTable;
    private javax.swing.JToggleButton PopulateCSTable;
    private javax.swing.JToggleButton PopulateGeoTable;
    private javax.swing.JToggleButton PopulateINnetDeductTable;
    private javax.swing.JToggleButton PopulateMOOPTable;
    private javax.swing.JToggleButton PopulateOONDeductTable;
    private javax.swing.JToggleButton PopulateOOPTable;
    private javax.swing.JToggleButton PopulatePlanLvlProgramsTable;
    private javax.swing.JToggleButton PopulatePlanTable;
    private javax.swing.JToggleButton PopulatePremiumTable;
    private javax.swing.JToggleButton PopulateProviderTable;
    private javax.swing.JToggleButton PopulateReferralTable;
    private javax.swing.JDialog PrintTableDIalog;
    private javax.swing.JComboBox<String> QueryDropdownList;
    private javax.swing.JTable QueryResultTable;
    private javax.swing.JPanel QueryTabContainer;
    private javax.swing.JLabel QueryTabDescription;
    private javax.swing.JScrollPane QueryTableContainer;
    private javax.swing.JButton btnInsertINSERT1;
    private javax.swing.JButton btnInsertINSERT2;
    private javax.swing.JButton btnInsertINSERT5;
    private javax.swing.JButton btnInsertINSERT6;
    private javax.swing.JButton btnInsertNEXT1;
    private javax.swing.JButton btnInsertNEXT2;
    private javax.swing.JButton btnInsertNEXT5;
    private javax.swing.JButton btnInsertSAVE;
    private javax.swing.JButton deleteTblData;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblAdvPayment;
    private javax.swing.JLabel lblAgeRange;
    private javax.swing.JLabel lblBeneCoin;
    private javax.swing.JLabel lblBeneCostPlanID;
    private javax.swing.JLabel lblBeneDescrip;
    private javax.swing.JLabel lblBenePlanID;
    private javax.swing.JLabel lblBeneService;
    private javax.swing.JLabel lblCSRvar;
    private javax.swing.JLabel lblChildOnlyPlanID;
    private javax.swing.JLabel lblCustomSQLQueryBtn;
    private javax.swing.JLabel lblDiseaseMgmt;
    private javax.swing.JLabel lblEHBPercentPremium;
    private javax.swing.JLabel lblGeoPlanID;
    private javax.swing.JLabel lblINnetCombined;
    private javax.swing.JLabel lblINnetComboDeduct;
    private javax.swing.JLabel lblINnetDrug;
    private javax.swing.JLabel lblINnetDrugDeduct;
    private javax.swing.JLabel lblINnetMedDeduct;
    private javax.swing.JLabel lblINnetPedDentDeduct;
    private javax.swing.JLabel lblINnetPlanID;
    private javax.swing.JLabel lblInNetMOOP;
    private javax.swing.JLabel lblInNetMed;
    private javax.swing.JLabel lblIndivRate;
    private javax.swing.JLabel lblInsertBeneServ;
    private javax.swing.JLabel lblInsertCSPlanID;
    private javax.swing.JLabel lblInsertCopay;
    private javax.swing.JLabel lblInsertHSAHRA;
    private javax.swing.JLabel lblInsertInstructions1;
    private javax.swing.JLabel lblInsertInstructions2;
    private javax.swing.JLabel lblInsertIntro;
    private javax.swing.JLabel lblInsertIssuerID;
    private javax.swing.JLabel lblInsertIssuerName;
    private javax.swing.JLabel lblInsertOOPCoin;
    private javax.swing.JLabel lblInsertPlanID;
    private javax.swing.JLabel lblInsertPlanID3;
    private javax.swing.JLabel lblInsertPlanType;
    private javax.swing.JLabel lblInsertPlanURL;
    private javax.swing.JLabel lblInsertPremium;
    private javax.swing.JLabel lblInsertQHPStatus;
    private javax.swing.JLabel lblInsertRefPlanID;
    private javax.swing.JLabel lblInsertServiceArea;
    private javax.swing.JLabel lblInsertStatus;
    private javax.swing.JLabel lblIssuerActuarial;
    private javax.swing.JLabel lblMOOPplanID;
    private javax.swing.JLabel lblMaxColList;
    private javax.swing.JLabel lblMaxTblList;
    private javax.swing.JLabel lblMetalLevel;
    private javax.swing.JLabel lblMinMaxColList;
    private javax.swing.JLabel lblMinMaxTblList;
    private javax.swing.JLabel lblModifyTableList;
    private javax.swing.JLabel lblModifyWarning;
    private javax.swing.JLabel lblOOCcoverage;
    private javax.swing.JLabel lblOONPlanID;
    private javax.swing.JLabel lblOOPCopay;
    private javax.swing.JLabel lblOOPPlanID;
    private javax.swing.JLabel lblOOScoverage;
    private javax.swing.JLabel lblOutNetMOOP;
    private javax.swing.JLabel lblPlanIssuerID;
    private javax.swing.JLabel lblPlanLvlPlanID;
    private javax.swing.JLabel lblPlanName;
    private javax.swing.JLabel lblPlanServiceArea;
    private javax.swing.JLabel lblQuantServ;
    private javax.swing.JLabel lblQueryDropdown;
    private javax.swing.JLabel lblQueryTabIntro;
    private javax.swing.JLabel lblReasonEHB;
    private javax.swing.JLabel lblRefReq;
    private javax.swing.JLabel lblSelectDisplayTable;
    private javax.swing.JLabel lblSpecReq;
    private javax.swing.JLabel lblTabaccoWell;
    private javax.swing.JLabel lblinNetPedDent;
    private javax.swing.JButton updateTblData;
    // End of variables declaration//GEN-END:variables
}
